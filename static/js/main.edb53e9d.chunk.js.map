{"version":3,"sources":["GameCell.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["privateConstantMap","GameCell","props","state","clicked","flag","handleCellClicked","bind","handleRightClick","target","this","row","column","clickedCell","mine","count","console","log","setState","e","preventDefault","rightClickedCell","flagClass","mineClass","countClass","toString","id","className","onClick","onContextMenu","Component","Timer","initialState","elapsedTime","initTime","start","Date","now","timer","setInterval","totalSeconds","sec","Math","floor","displaySec","min","App","nRows","nCols","nMines","Gameboard","nmarked","nuncovered","exploded","arr","array2d","uncover","nrows","ncols","val","res","col","max","ceil","random","r","c","dr","dc","validCoord","allowed","abs","push","length","i","j","rndInt","mines","s","gameboardArr","map","slice","join","sprinkleMines","uncoveredUpdated","ff","lost","alert","window","location","reload","totalHiddenSquares","a","done","item","key","subitem","mark","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edb53e9d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Gameboard from './App.js';\r\n\r\n\r\ntype Props = {\r\n  row: number,\r\n  column: number,\r\n  state: String,\r\n  mine: Boolean,\r\n  count: number,\r\n  clickedCell: Function,\r\n  rightClickedCell: Function\r\n};\r\n\r\ntype State = {\r\n  clicked: Boolean,\r\n  flag: Boolean\r\n}\r\n// private constants\r\nconst privateConstantMap = {\r\n  STATE_HIDDEN: \"hidden\",\r\n  STATE_SHOWN: \"shown\",\r\n  STATE_MARKED: \"marked\"\r\n};\r\n\r\nclass GameCell extends Component<Props, State> {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { clicked: false, flag: false };\r\n    this.handleCellClicked = this.handleCellClicked.bind(this);\r\n    this.handleRightClick = this.handleRightClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  handleCellClicked({ target }: SyntheticMouseEvent<>) {\r\n    let {row, column, state, mine, count, clickedCell} = this.props;\r\n    let {clicked, flag} = this.state;\r\n    console.log(\"I was clicked in r,c:\" + row + \",\" + column);\r\n    //If there is no flag on this cell, set clicked to true\r\n    if(!flag) {\r\n      //clicked = true;\r\n      this.setState({clicked: true});\r\n    }\r\n    \r\n    if(typeof state !== 'undefined') {\r\n      if(state !== privateConstantMap.STATE_HIDDEN) {\r\n        console.log(\"This cell is already shown, set as clicked\");\r\n        clicked = true;\r\n        this.setState({clicked: true});\r\n        //return;\r\n      }\r\n    }\r\n    \r\n    //If it hasn't been clicked before, call uncover method from Gameboard\r\n    console.log(\"clicked state is: \" + this.state.clicked + \" clicked var is: \" + clicked);\r\n    if(!clicked) {\r\n      clickedCell(row, column);\r\n    }\r\n\r\n  }\r\n\r\n  handleRightClick(e: SyntheticMouseEvent<>) {\r\n    e.preventDefault();\r\n    let {row, column, rightClickedCell, state} = this.props;\r\n    let {clicked, flag} = this.state;\r\n    if(!clicked) {\r\n      if(state !== privateConstantMap.STATE_SHOWN) {\r\n        if(flag) {\r\n          this.setState({flag: false});\r\n        } else {\r\n          this.setState({flag: true});\r\n        }\r\n        rightClickedCell(row, column);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let {row, column, state, mine, count, clickedCell, rightClickedCell} = this.props;\r\n    let {flag} = this.state;\r\n    const flagClass = (flag && state === privateConstantMap.STATE_HIDDEN) ? 'marked' : ''\r\n    const mineClass =  mine ? 'mine' : ''\r\n    const countClass = count.toString();\r\n    //const stateClass = (state=== 'hidden') ? ''\r\n    return(\r\n      <td id={`${row}_${column}`}\r\n        className={`${mineClass} ${flagClass} ${state} _${countClass}`}\r\n        onClick={this.handleCellClicked.bind(this)}\r\n        onContextMenu={this.handleRightClick.bind(this)}\r\n        >\r\n          {(state === privateConstantMap.STATE_SHOWN) ? count : ''}\r\n      </td>\r\n    );\r\n  }\r\n\r\n\r\n} export default GameCell;\r\n","import React, {Component} from 'react';\r\n\r\nclass Timer extends Component<State> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.initialState = {\r\n            elapsedTime: 0,\r\n            initTime: 0\r\n        };\r\n        this.start = this.start.bind(this);\r\n    }\r\n\r\n    /**\r\n     *  This method gets called when the start button gets clicked and begins\r\n     *  the timer. \r\n     */\r\n    start() {\r\n        this.setState(state => {\r\n            const initTime = Date.now() - this.state.elapsedTime;\r\n            this.timer = setInterval(() =>  {\r\n                this.setState({elapsedTime: Date.now() - initTime});\r\n            });\r\n       });\r\n    }\r\n\r\n    render() {\r\n        const totalSeconds = this.state.elapsedTime;\r\n        const sec = Math.floor(totalSeconds / 1000).toString();\r\n        const displaySec = Math.floor(sec % 60).toString();\r\n        const min = Math.floor(totalSeconds /60000).toString();\r\n    \r\n        return( \r\n        <div id=\"timer-wrapper\">\r\n            <p>{min}m:{displaySec}s</p>\r\n            <button id=\"timer-start-button\" className=\"timer-button\" onClick={this.start}> Start</button>\r\n        </div>\r\n        );\r\n\r\n    }\r\n} export default Timer;","import React, {Component} from 'react';\nimport './App.css';\nimport GameCell from './GameCell';\nimport Timer from './Timer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Minesweeper</h1>\n        <Timer/>       \n        <Gameboard nRows=\"10\" nCols=\"10\" nMines=\"8\"></Gameboard>\n        <p>Remaining mines: 8</p>\n      </header>\n    </div>\n  );\n} export default App;\n\n\n// private constants\nconst privateConstantMap = {\n  STATE_HIDDEN: \"hidden\",\n  STATE_SHOWN: \"shown\",\n  STATE_MARKED: \"marked\"\n};\n\ntype Props = {};\ntype State = {\n  nCols: number,\n  nRows: number,\n  nMines: number,\n  nmarked: number,\n  nuncovered: number,\n  exploded: Boolean,\n  arr: Array<Array<>>\n};\n/**\n * Gameboard is the grid composed of a 2D array that represents\n * the minesweeper UI\n */\nexport class Gameboard extends Component<State, Props> {\n  \n  constructor(props) {\n    super(props);\n    let nCols = 10;\n    let nRows = 10;\n    let nMines = 8;\n    let nmarked = 0;\n    let nuncovered = 0;\n    let exploded = false;\n\n    this.state = {\n      nCols,\n      nRows,\n      nMines,\n      nmarked,\n      nuncovered,\n      exploded,\n      arr: this.array2d(nRows, nCols,\n        () => ({mine: false, state: privateConstantMap.STATE_HIDDEN, count: 0}))\n    };\n    //this.ff = this.ff.bind(this);\n    this.uncover = this.uncover.bind(this);\n  }\n\n  /**\n   * 2D array representing the gameboard\n   * @param {*} nrows \n   * @param {*} ncols \n   * @param {*} val \n   */\n  array2d( nrows, ncols, val) {\n    const res = [];\n    for( let row = 0 ; row < nrows ; row ++) {\n      res[row] = [];\n      for( let col = 0 ; col < ncols ; col ++)\n        res[row][col] = val(row,col);\n    }\n\n    return res;\n  }\n\n  // returns random integer in range [min, max]\n  rndInt(min, max) {\n    [min,max] = [Math.ceil(min), Math.floor(max)]\n    return min + Math.floor(Math.random() * (max - min + 1));\n  }\n\n  validCoord(row, col) {\n    return row >= 0 && row < this.state.nRows && col >= 0 && col < this.state.nCols;\n  }\n\n  count(row,col) {\n    const c = (r,c) =>\n          (this.validCoord(r,c) && this.state.arr[r][c].mine ? 1 : 0);\n    let res = 0;\n    for( let dr = -1 ; dr <= 1 ; dr ++ )\n      for( let dc = -1 ; dc <= 1 ; dc ++ )\n        res += c(row+dr,col+dc);\n    return res;\n  }\n\n  sprinkleMines(row, col) {\n    // prepare a list of allowed coordinates for mine placement\n    let allowed = [];\n    for(let r = 0 ; r < this.state.nRows ; r ++ ) {\n      for( let c = 0 ; c < this.state.nCols ; c ++ ) {\n        if(Math.abs(row-r) > 2 || Math.abs(col-c) > 2)\n          allowed.push([r,c]);\n      }\n    }\n   \n    this.state.nMines = Math.min(this.state.nMines, allowed.length);\n    for( let i = 0 ; i < this.state.nMines ; i ++ ) {\n      let j = this.rndInt(i, allowed.length-1);\n      [allowed[i], allowed[j]] = [allowed[j], allowed[i]];\n      let [r,c] = allowed[i];\n      this.state.arr[r][c].mine = true;\n      console.log(\"mine here: \" + \" r,c:\" + r + \",\" + c + \" \" + this.state.arr[r][c].mine);\n    }\n    // erase any marks (in case user placed them) and update counts\n    for(let r = 0 ; r < this.state.nRows ; r ++ ) {\n      for( let c = 0 ; c < this.state.nCols ; c ++ ) {\n        if(this.state.arr[r][c].state == privateConstantMap.STATE_MARKED) {\n          this.state.arr[r][c].state = privateConstantMap.STATE_HIDDEN; \n        }\n        this.state.arr[r][c].count = this.count(r,c);\n      }\n    }\n    let mines = []; let counts = [];\n    for(let row = 0 ; row < this.state.nRows ; row ++ ) {\n      let s = \"\";\n      for( let col = 0 ; col < this.state.nCols ; col ++ ) {\n        s += this.state.arr[row][col].mine ? \"B\" : \".\";\n      }\n      s += \"  |  \";\n      for( let col = 0 ; col < this.state.nCols ; col ++ ) {\n        s += this.state.arr[row][col].count.toString();\n      }\n      mines[row] = s;\n    }\n    let gameboardArr = this.state.arr.map(function(arr) {\n      return arr.slice();\n    });\n    this.setState({arr: gameboardArr});\n\n    console.log(\"Mines and counts after sprinkling:\");\n    console.log(mines.join(\"\\n\"), \"\\n\");\n  }\n\n  // uncovers a cell at a given coordinate\n  // this is the 'left-click' functionality\n  uncover(row, col) {\n    console.log(\"uncover\", row, col);\n    // if coordinates invalid, refuse this request\n    if( ! this.validCoord(row,col)) {\n      console.log(\"Requested coordinates (\" + row + \", \"+ col + \") were invalid.\");\n      return false; \n    }\n    let nuncovered = this.state.nuncovered;\n    console.log(\"beginning uncover method with nuncovered: \" + this.state.nuncovered\n    + \" with var: \" + nuncovered);\n\n    // if this is the very first move, populate the mines, but make\n    // sure the current cell does not get a mine\n    if( this.state.nuncovered === 0) {\n      console.log(\"populating with mines at: \" + row + \", \" + col);\n      this.sprinkleMines(row, col);\n    }\n    // if cell is not hidden, ignore this move\n    //this.state.arr[row][col].state !== privateConstantMap.STATE_HIDDEN //prev if statement\n    if( typeof this.state.arr[row][col].state !== 'undefined') {\n      console.log(\"state of this cell is not undefined, it's: \" + this.state.arr[row][col].state);\n      if(this.state.arr[row][col].state !== privateConstantMap.STATE_HIDDEN) {\n        return false; //STATE_HIDDEN\n      }\n    }\n    let gameboardArr = this.state.arr.map(function(arr) {\n      return arr.slice();\n    });\n\n    let uncoveredUpdated = this.state.nuncovered;\n    //floodfill all 0-count cells\n    const ff = (r, c, gameboardArr, uncoveredUpdated) => {\n      if(!this.validCoord(r,c)) {\n        return;\n      }\n      \n      if(typeof gameboardArr[r][c].state !== 'undefined'){ \n        if(gameboardArr[r][c].state !== privateConstantMap.STATE_HIDDEN) {\n          return; \n        }\n      }\n      gameboardArr[r][c].state = privateConstantMap.STATE_SHOWN;\n      uncoveredUpdated++;\n      //console.log(\"uncoveredupdated: \" + uncoveredUpdated);\n      this.state.nuncovered = uncoveredUpdated;\n      this.setState({nuncovered: uncoveredUpdated}, () => {\n       console.log(\"updated nuncovered state in ff: \" + this.state.nuncovered);\n      });\n      \n      if(gameboardArr[r][c].count !== 0) {\n        return;\n      }\n      ff(r-1,c-1, gameboardArr, uncoveredUpdated);ff(r-1,c, gameboardArr, uncoveredUpdated);ff(r-1,c+1, gameboardArr, uncoveredUpdated);\n      ff(r  ,c-1, gameboardArr, uncoveredUpdated);         ;ff(r  ,c+1, gameboardArr, uncoveredUpdated);\n      ff(r+1,c-1, gameboardArr, uncoveredUpdated);ff(r+1,c, gameboardArr, uncoveredUpdated);ff(r+1,c+1, gameboardArr, uncoveredUpdated);\n    };\n    ff(row,col, gameboardArr, uncoveredUpdated);\n    // for(let i = 0; i < gameboardArr.length; i++) {\n    //   for(let j = 0; j < gameboardArr.length; j++){\n    //     console.log(\"row: \" + i + \" col: \" + j + \" state: \" + gameboardArr[i][j].state + \" count: \" + gameboardArr[i][j].count + \" mine: \" + gameboardArr[i][j].mine);\n    //   }\n    // }\n    this.setState({arr: gameboardArr}, () => {\n      // for(let i = 0; i < this.state.arr.length; i++) {\n      //   for(let j = 0; j < this.state.arr.length; j++){\n      //     console.log(\"ARR row: \" + i + \" col: \" + j + \" state: \" + this.state.arr[i][j].state + \" count: \" + this.state.arr[i][j].count + \" mine: \" + this.state.arr[i][j].mine);\n      //   }\n      // }\n    });\n    \n    this.setState({nuncovered: this.state.nuncovered}, () => {\n      console.log(\"updated nuncovered state AFTER ff: \" + this.state.nuncovered);\n    });   \n    // have we hit a mine?\n    let lost = false;\n    if(this.state.arr[row][col].mine) {\n      console.log(\"Mine at \" + row + \", \" + col + \" was hit\");\n      this.state.exploded = true;\n      lost = true;\n      alert(\"You lost\");\n      window.location.reload(true);\n    }\n    if(!lost) {\n      let totalHiddenSquares = 0;\n      for(let i = 0; i < this.state.arr.length; i++) {\n        for(let j = 0; j < this.state.arr.length; j++) {\n          if(this.state.arr[i][j].state === privateConstantMap.STATE_HIDDEN) {\n            totalHiddenSquares++;\n            //console.log(\"Hidden Squares remaining: \" + totalHiddenSquares);\n          }\n        }\n      }\n      if(totalHiddenSquares === this.state.nMines) {\n        alert(\"You win!\");\n        window.location.reload(true);\n      }\n    }\n    \n   // this.getStatus();\n    console.log(\"nuncovered state value: \" + this.state.nuncovered + \" , uncoveredUpdated temp var: \" + uncoveredUpdated);\n    return true;\n  }\n\n  // puts a flag on a cell\n  // this is the 'right-click' or 'long-tap' functionality\n  mark(row, col) {\n    console.log(\"mark\", row, col);\n    // if coordinates invalid, refuse this request\n    if( ! this.validCoord(row,col)){\n      return false;\n    }\n    // if cell already uncovered, refuse this\n    console.log(\"marking previous state=\", this.state.arr[row][col].state);\n    if( this.state.arr[row][col].state === privateConstantMap.STATE_SHOWN) return false; //STATE_SHOWN\n    // accept the move and flip the marked status\n    this.nmarked += this.state.arr[row][col].state == privateConstantMap.STATE_MARKED ? -1 : 1;\n    this.state.arr[row][col].state = this.state.arr[row][col].state == privateConstantMap.STATE_MARKED ? \n    privateConstantMap.STATE_HIDDEN : privateConstantMap.STATE_MARKED; //STATE_HIDDEN:STATE_MARKED\n    return true;\n  }\n\n\n  // returns array of strings representing the rendering of the board\n  //      \"H\" = hidden cell - no bomb\n  //      \"F\" = hidden cell with a mark / flag\n  //      \"M\" = uncovered mine (game should be over now)\n  // '0'..'9' = number of mines in adjacent cells\n  getRendering() {\n    const res = [];\n    for( let row = 0 ; row < this.state.nRows ; row ++) {\n      let s = \"\";\n      for( let col = 0 ; col < this.state.nCols ; col ++ ) {\n        let a = this.state.arr[row][col];\n        if( this.exploded && a.mine) s += \"M\";\n        else if( a.state === privateConstantMap.STATE_HIDDEN) s += \"H\"; //statehidden\n        else if( a.state === privateConstantMap.STATE_MARKED) s += \"F\"; //state marked\n        else if( a.mine) s += \"M\";\n        else s += a.count.toString();\n      }\n      res[row] = s;\n    }\n    return res;\n  }\n\n  getStatus() {\n    let done = this.state.exploded ||\n        this.state.nuncovered === this.state.nRows * this.state.nCols - this.state.nMines;\n    if(done) {\n      alert(\"You win!\");\n    }\n    return {\n      done: done,\n      exploded: this.state.exploded,\n      nRows: this.state.nRows,\n      nCols: this.state.nCols,\n      nmarked: this.state.nmarked,\n      nuncovered: this.state.nuncovered,\n      nMines: this.state.nMines\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"gameboard-container\">\n        <table id=\"gameboard-table\">\n          <tbody>\n            {this.state.arr.map((item, row) => {\n              return(\n                <tr key={row}>\n                  {item.map((subitem, col) => {\n                    return (\n                      <GameCell \n                        key={col}\n                        row={row}\n                        column={col}\n                        state={subitem.state}\n                        mine={subitem.mine}\n                        count={subitem.count}\n                        clickedCell={this.uncover.bind(this)}\n                        rightClickedCell={this.mark.bind(this)}\n                      >\n                      </GameCell>\n                    );\n                  }\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>  \n        </table>   \n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}